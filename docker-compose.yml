# -------------------------------------------------------------------
# docker-compose.yml
#
# Propósito:
# ----------
# Orquestar la infraestructura mínima del proyecto "Kopi Debate API":
# - Base de datos PostgreSQL
# - API en FastAPI
#
# Funcionalidad:
# --------------
# • Define dos servicios:
#     1. db  → contenedor con PostgreSQL 16, con persistencia en volumen.
#     2. api → contenedor que levanta la aplicación FastAPI, conectado a la DB.
#
# • Gestiona variables de entorno desde un archivo .env:
#     POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB, POSTGRES_PORT, OPENAI_API_KEY.
#
# • Expone servicios a la máquina host:
#     - PostgreSQL en el puerto definido en .env (ej: 5432).
#     - FastAPI en http://localhost:8000.
#
# • Volúmenes:
#     - pg_data: mantiene datos persistentes de la DB.
#     - ./scripts: inicializa la DB ejecutando automáticamente archivos .sql.
#
# • Healthcheck:
#     - Garantiza que el servicio de DB esté operativo antes de que arranque la API.
#
# Resultado:
# ----------
# Con un solo comando (`docker-compose up --build`), se obtiene un entorno
# de desarrollo listo con DB + API interconectadas, usando configuración
# reproducible y portable.
# -------------------------------------------------------------------


version: "3.9"

services:
  db:
    # Imagen oficial de PostgreSQL (versión estable 16)
    image: postgres:16
    
    # Nombre del contenedor para identificarlo fácilmente
    container_name: kopi_db
    
    # Reinicio automático salvo que lo detengas manualmente
    restart: unless-stopped

    # Variables de entorno inyectadas desde .env
    # Definir:
    #   POSTGRES_USER=usuario
    #   POSTGRES_PASSWORD=contraseña
    #   POSTGRES_DB=nombre_base
    #   POSTGRES_PORT=5432 (o el que definas en tu .env)
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      TZ: UTC

    # Exposición del puerto: se mapea el puerto local al del contenedor
    ports:
      - "${POSTGRES_PORT}:5432"

    # Volúmenes:
    # - pg_data: persistencia de datos
    # - ./scripts: carpeta local montada en docker-entrypoint-initdb.d
    #              PostgreSQL ejecutará automáticamente los .sql dentro de esta ruta
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./scripts:/docker-entrypoint-initdb.d:ro

    # Healthcheck: asegura que el servicio esté "listo" antes de usarlo
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s   # cada cuánto probar
      timeout: 3s    # tiempo máximo de espera
      retries: 10    # intentos antes de marcarlo como "unhealthy"

  api:
    # Construye la imagen de la API a partir del Dockerfile en la raíz
    build: .
    
    # Nombre del contenedor para identificarlo fácilmente
    container_name: kopi_api

    # Reinicio automático salvo que lo detengas manualmente
    restart: unless-stopped

    # La API depende de que la base de datos esté lista
    depends_on:
      db:
        condition: service_healthy

    env_file:
      - .env

    # Variables de entorno que necesita la API
    environment:
      DATABASE_URL: postgresql+asyncpg://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      PYTHONPATH: /app

    # Expone FastAPI en localhost:8000
    ports:
      - "8000:8000"

# Declaración de volúmenes
volumes:
  pg_data:  # persiste los datos en disco
